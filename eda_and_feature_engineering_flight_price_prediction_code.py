# -*- coding: utf-8 -*-
"""EDA And Feature Engineering Flight Price Prediction Code

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l-5oUxIi9Zzlii1w71mhyUzpqzQhKown
"""

# Commented out IPython magic to ensure Python compatibility.
#importing basics libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df=pd.read_excel('/content/flight_price.xlsx')
df.head()

df.tail()

## Get the basics info about data
df.info()

df.describe()

## Feature Engineering
df['Date']=df['Date_of_Journey'].str.split('/').str[0]
df['Month']=df['Date_of_Journey'].str.split('/').str[1]
df['Year']=df['Date_of_Journey'].str.split('/').str[2]

df.info()

df['Date']=df['Date'].astype(int)
df['Month']=df['Month'].astype(int)
df['Year']=df['Year'].astype(int)

df.info()

## Drop Date Of Journey
df.drop('Date_of_Journey',axis=1,inplace=True)

df.head()

df['Arrival_Time']=df['Arrival_Time'].apply(lambda x:x.split(' ')[0])

df['Arrival_hour']=df['Arrival_Time'].apply(lambda x:x.split(' ')[0])

df['Arrival_min']=df['Arrival_Time'].apply(lambda x:x.split(' ')[0])

df.head(2)

df['Departure_hour']=df['Dep_Time'].str.split(':').str[0]
df['Departure_min']=df['Dep_Time'].str.split(':').str[1]

df['Departure_hour']=df['Departure_hour'].astype(int)
df['Departure_min']=df['Departure_min'].astype(int)

df.info()

df.drop('Dep_Time',axis=1,inplace=True)

df.head(2)

df['Total_Stops'].unique()

df[df['Total_Stops'].isnull()]

df['Total_Stops'].mode()

df['Total_Stops'].unique()

df['Total_Stops']=df['Total_Stops'].map({'non-stop':0,'1 stop':1,'2 stops':2,'3 stops':3,'4 stops':4,np.nan:1})

df[df['Total_Stops'].isnull()]

df.head(2)

df.drop('Route',axis=1,inplace=True)

df.head(2)

df['Duration'].str.split(' ').str[0].str.split('h').str[0]

df['Airline'].unique()

df['Source'].unique()

df['Additional_Info'].unique()

from sklearn.preprocessing import OneHotEncoder

encoder=OneHotEncoder()

encoder.fit_transform(df[['Airline','Source','Destination']]).toarray()

pd.DataFrame(encoder.fit_transform(df[['Airline','Source','Destination']]).toarray(),columns=encoder.get_feature_names_out())

"""Flight Ticket Price Prediction(Using Existing Dataset)"""

# Importing necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# --------------------
# üõ†Ô∏è Data Preprocessing
# --------------------

# One-hot encode categorical variables
df = pd.get_dummies(df, drop_first=True)

# --------------------
# üìä Model Preparation
# --------------------
# Splitting data into training and testing sets
X = df.drop('Price', axis=1)
y = df['Price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scaling numeric features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# --------------------
# üöÄ Model Training
# --------------------
# Using RandomForestRegressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# Predictions
y_pred = model.predict(X_test_scaled)

# --------------------
# üìà Evaluation
# --------------------
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R¬≤ Score: {r2}")

# --------------------
# üî• Predict on New Data
# --------------------
def predict_flight_price(new_data):
    """
    Predict flight price based on new input data.
    new_data: DataFrame with the same features as the training set.
    """
    new_data_encoded = pd.get_dummies(new_data, drop_first=True)

    # Ensure the new data has the same columns as the training set
    missing_cols = set(X_train.columns) - set(new_data_encoded.columns)
    for col in missing_cols:
        new_data_encoded[col] = 0

    # Align the order of columns
    new_data_encoded = new_data_encoded[X_train.columns]

    new_data_scaled = scaler.transform(new_data_encoded)
    prediction = model.predict(new_data_scaled)
    return prediction

"""Example Usage"""

new_data = pd.DataFrame({
    'Airline': ['IndiGo'],               # Sample airline
    'Source': ['Delhi'],                 # Sample source
    'Destination': ['Cochin'],           # Sample destination
    'Route': ['DEL ‚Üí BLR ‚Üí COK'],        # Sample route
    'Duration': [150],                   # Sample duration in minutes
    'Total_Stops': ['1 stop'],           # Number of stops
    'Additional_Info': ['No info'],      # Additional info
    'Date': [15],
    'Month': [5],
    'Year': [2025],
    'Arrival_hour': [13],
    'Arrival_min': [45],
    'Departure_hour': [10],
    'Departure_min': [30],
})

# Predicting the price
predicted_price = predict_flight_price(new_data)
print("Predicted Flight Price:", predicted_price)